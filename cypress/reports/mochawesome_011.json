{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-18T18:02:46.945Z",
    "end": "2025-01-18T18:02:50.105Z",
    "duration": 3160,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "205140a7-70af-4b17-9a59-0e56cf4d4874",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/network_requests.cy.js",
      "file": "cypress/e2e/2-advanced-examples/network_requests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "33793b71-b7da-43a7-b611-ae3c3cd2a10c",
          "title": "Network Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 467,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n  expect(response.status).to.eq(200);\n  // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "9d35b52d-84c4-4ae4-9d70-1fe6ab80f04e",
              "parentUUID": "33793b71-b7da-43a7-b611-ae3c3cd2a10c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 262,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "4e96e5eb-71f3-4a81-bc24-c0ae797d8e51",
              "parentUUID": "33793b71-b7da-43a7-b611-ae3c3cd2a10c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 230,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "067d6621-4db2-45dd-8b9d-c248ec64d981",
              "parentUUID": "33793b71-b7da-43a7-b611-ae3c3cd2a10c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 362,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property('id').to.be.a('number');\n  // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n})\n// note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    title: 'Cypress Test Runner'\n  });\n  // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property('id').to.be.a('number').and.to.be.gt(100);\n  // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "39445823-d833-4a59-befb-90dc3a11452e",
              "parentUUID": "33793b71-b7da-43a7-b611-ae3c3cd2a10c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 412,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE ðŸ‘€\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "54ce23f9-475c-4d02-b386-5ac647e086b8",
              "parentUUID": "33793b71-b7da-43a7-b611-ae3c3cd2a10c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 565,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/intercept\nlet message = 'whoa, this comment does not exist';\n// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);\n// Listen to POST to comments\ncy.intercept('POST', '**/comments').as('postComment');\n// we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include('email');\n  expect(request.headers).to.have.property('content-type');\n  expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n});\n// Stub a response to PUT comments/ ****\ncy.intercept({\n  method: 'PUT',\n  url: '**/comments/*'\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    'access-control-allow-origin': '*'\n  },\n  delayMs: 500\n}).as('putComment');\n// we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment');\n// our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "35620153-c74d-4121-8d68-81483811ceac",
              "parentUUID": "33793b71-b7da-43a7-b611-ae3c3cd2a10c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d35b52d-84c4-4ae4-9d70-1fe6ab80f04e",
            "4e96e5eb-71f3-4a81-bc24-c0ae797d8e51",
            "067d6621-4db2-45dd-8b9d-c248ec64d981",
            "39445823-d833-4a59-befb-90dc3a11452e",
            "54ce23f9-475c-4d02-b386-5ac647e086b8",
            "35620153-c74d-4121-8d68-81483811ceac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2298,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}